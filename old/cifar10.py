
# IMPORTS
import keras
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D

import os
import numpy as np

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt


# PARAMETERS
batch_size = 32
num_classes = 10
epochs = 30
data_augmentation = True
num_predictions = 20

wdir = '/home/mho1/pylon2/'

data_path = os.path.join(wdir, 'data')
save_dir = wdir + 'saved_models'
model_name = 'keras_cifar10'

if not os.path.isdir(save_dir):
    os.makedirs(save_dir)

# MODEL SPECIFICATION

log = os.listdir(save_dir)
model_num = int(np.sum([i[:-len(i.split('_')[-1])-1]== model_name for i in log]))

model_dir = os.path.join(save_dir, model_name + '_' + str(model_num))

# DATA
# train, test = np.load(data_path)
x_train = np.load(os.path.join(data_path,'c10_tr_x.npy'))
y_train = np.load(os.path.join(data_path,'c10_tr_y.npy'))
x_test = np.load(os.path.join(data_path,'c10_te_x.npy'))
y_test = np.load(os.path.join(data_path,'c10_te_y.npy'))

# (x_train, y_train), (x_test, y_test) = cifar10.load_data()

print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255

# MODEL
model = Sequential()

## 2 convolution layers
model.add(Conv2D(32, (3, 3), padding='same',
                 input_shape=x_train.shape[1:]))
model.add(Activation('relu'))
model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

## 2 dense layers
model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes))
model.add(Activation('softmax'))

opt = keras.optimizers.rmsprop(lr=0.0001, decay=1e-6)

model.compile(loss='categorical_crossentropy',
              optimizer=opt,
              metrics=['accuracy'])
              
# FIT
if not data_augmentation:
    print('Not using data augmentation.')
    hist = model.fit(x_train, y_train,
                      batch_size=batch_size,
                      epochs=epochs,
                      validation_data=(x_test, y_test),
                      shuffle=True,
                      verbose=2)
else:
    print('Using real-time data augmentation.')
    # This will do preprocessing and realtime data augmentation:
    datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=True,  # randomly flip images
        vertical_flip=False)  # randomly flip images

    # Compute quantities required for feature-wise normalization
    # (std, mean, and principal components if ZCA whitening is applied).
    datagen.fit(x_train)

    # Fit the model on the batches generated by datagen.flow().
    steps_per_epoch = int(np.ceil(x_train.shape[0] / float(batch_size)))
    hist = model.fit_generator(datagen.flow(x_train, y_train,
                                             batch_size=batch_size),
                                steps_per_epoch=steps_per_epoch,
                                epochs=epochs,
                                validation_data=(x_test, y_test),
                                verbose=2)


# PLOT AND SAVE
if not os.path.isdir(model_dir):
    os.makedirs(model_dir)

    
f = plt.figure(figsize=[8,6])
plt.plot(hist.history['loss'],'r',linewidth=3.0)
plt.plot(hist.history['val_loss'],'b',linewidth=3.0)
plt.legend(['Training loss', 'Validation Loss'],fontsize=18)
plt.xlabel('Epochs ',fontsize=16)
plt.ylabel('Loss',fontsize=16)
plt.title('Loss Curves',fontsize=16)
f.savefig(os.path.join(model_dir,'training_loss.pdf'))

f = plt.figure(figsize=[8,6])
plt.plot(hist.history['acc'],'r',linewidth=3.0)
plt.plot(hist.history['val_acc'],'b',linewidth=3.0)
plt.legend(['Training Accuracy', 'Validation Accuracy'],fontsize=18)
plt.xlabel('Epochs ',fontsize=16)
plt.ylabel('Accuracy',fontsize=16)
plt.title('Accuracy Curves',fontsize=16)
f.savefig(os.path.join(model_dir,'training_acc.pdf'))


model_path = os.path.join(model_dir, model_name)
model.save(model_path)
print('Saved trained model at %s ' % model_path)
